
$creturn  :: forall (t :: * -> *) a .   a -> Zombie t a
[LclId,
Arity=1,
Str=<L,U>m2 ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
}]
$creturn = \ (@ (t :: * -> *)) (@ a) (a  :: a) -> ReturnZ @ t @ a a (Sunlight @ t @ a)

Rec {

$c<|> [Occ=LoopBreaker] :: forall (t :: * -> *) a .   Zombie t a -> Zombie t a -> Zombie t a
[LclId,
Arity=2,
Str=<S,1*U><L,1*U> ,
Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [80 0] 110 70
}]
$c<|>
= \ (@ (t :: * -> *)) (@ a) (ds_d3qT [Dmd=<S,1*U>] :: Zombie t a) (ys [Dmd=<L,1*U>] :: Zombie t a) ->
  case ds_d3qT  of  {
    Sunlight  -> ys;
      ReturnZ x  xs [Dmd=<L,1*U>] -> ReturnZ @ t @ a x ($c<|> @ t @ a xs ys);
      BindZ @ x x  c  xs [Dmd=<L,1*U>] -> BindZ @ t @ a @ x x c ($c<|> @ t @ a xs ys)
    }

end Rec }

Rec {

$c>>= [Occ=LoopBreaker] :: forall (t :: * -> *) a b .   Zombie t a -> (a -> Zombie t b) -> Zombie t b
[LclId,
Arity=2,
Str=<S,1*U><L,U> ,
Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [110 60] 180 50
}]
$c>>=
= \ (@ (t :: * -> *)) (@ a) (@ b) (ds_d3qF [Dmd=<S,1*U>] :: Zombie t a) (ds_d3qG  :: a -> Zombie t b) ->
  case ds_d3qF  of  {
    Sunlight  -> Sunlight @ t @ b;
      ReturnZ a  xs [Dmd=<L,1*U>] -> $c<|> @ t @ b (ds_d3qG a) ($c>>= @ t @ a @ b xs ds_d3qG);
      BindZ @ x x  c  xs [Dmd=<L,1*U>] ->
      BindZ
        @ t
          @ b
          @ x
          x
          (|>
          @ *
            @ (Kleisli (Zombie t))
            @ x
            @ a
            @ b
            c
            (ds_d3qG `cast` (Sym (N:Kleisli[0] <Zombie t>_R <a>_R <b>_N) :: Coercible (a -> Zombie t b) (Kleisli (Zombie t) a b))))
          ($c>>= @ t @ a @ b xs ds_d3qG)
    }

end Rec }


$cfmap  :: forall (t :: * -> *) a b .   (a -> b) -> Zombie t a -> Zombie t b
[LclId,
Arity=2,
Str=<L,C(U)><S,1*U> ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
}]
$cfmap
= \ (@ (t :: * -> *)) (@ a) (@ b) (f [Dmd=<L,C(U)>] :: a -> b) (m1 [Dmd=<S,1*U>] :: Zombie t a) ->
  $c>>= @ t @ a @ b m1 (\ (x1  :: a) -> ReturnZ @ t @ b (f x1) (Sunlight @ t @ b))


$c<*>  :: forall (t :: * -> *) a b .   Zombie t (a -> b) -> Zombie t a -> Zombie t b
[LclId,
Arity=2,
Str=<S,1*U><L,U> ,
Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 110 0
}]
$c<*>
= \ (@ (t :: * -> *)) (@ a) (@ b) (m1 [Dmd=<S,1*U>] :: Zombie t (a -> b)) (m2  :: Zombie t a) ->
  $c>>= @ t @ (a -> b) @ b m1 (\ (x1 [Dmd=<L,C(U)>] :: a -> b) -> $c>>= @ t @ a @ b m2 (\ (x2  :: a) -> ReturnZ @ t @ b (x1 x2) (Sunlight @ t @ b)))


$cliftA2  :: forall (t :: * -> *) a b c .   (a -> b -> c) -> Zombie t a -> Zombie t b -> Zombie t c
[LclId,
Arity=2,
Str=<L,C(U)><L,1*U> ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
}]
$cliftA2
= \ (@ (t :: * -> *)) (@ a) (@ b) (@ c) (f1 [Dmd=<L,C(U)>] :: a -> b -> c) (x [Dmd=<L,1*U>] :: Zombie t a) ->
  $c<*> @ t @ b @ c ($cfmap @ t @ a @ (b -> c) f1 x)


lvl_s3sE  :: forall a b (t :: * -> *) .   a -> Zombie t (b -> a)
[LclId,
Arity=1,
Str=<L,U>m2 ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
}]
lvl_s3sE = \ (@ a) (@ b) (@ (t :: * -> *)) (x1  :: a) -> ReturnZ @ t @ (b -> a) (\ _ [Occ=Dead, Dmd=<L,A>] -> x1) (Sunlight @ t @ (b -> a))


$c<*  :: forall (t :: * -> *) a b .   Zombie t a -> Zombie t b -> Zombie t a
[LclId,
Arity=1,
Str=<L,1*U> ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
}]
$c<* = \ (@ (t :: * -> *)) (@ a) (@ b) (x [Dmd=<L,1*U>] :: Zombie t a) -> $c<*> @ t @ b @ a ($c>>= @ t @ a @ (b -> a) x (lvl_s3sE @ a @ b @ t))


lvl_s3sF  :: forall a (t :: * -> *) .   Zombie t [a]
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
lvl_s3sF = \ (@ a) (@ (t :: * -> *)) -> ReturnZ @ t @ [a] ([] @ a) (Sunlight @ t @ [a])


lvl_s3sG  :: forall a (t :: * -> *) .   a -> Zombie t ([a] -> [a])
[LclId,
Arity=1,
Str=<L,U>m2 ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
}]
lvl_s3sG = \ (@ a) (@ (t :: * -> *)) (x1  :: a) -> ReturnZ @ t @ ([a] -> [a]) (: @ a x1) (Sunlight @ t @ ([a] -> [a]))


$csome  :: forall (t :: * -> *) a .   Zombie t a -> Zombie t [a]
[LclId,
Arity=1,
Str=<S,U> ,
Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 190 0
}]
$csome
= \ (@ (t :: * -> *)) (@ a) (v [Dmd=<S,U>] :: Zombie t a) ->
  letrec {
    
      some_v [Occ=LoopBreaker] :: Zombie t [a]
      [LclId,
      Str= {a3rh-><S,A>},
      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False, WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 180 0
      }]
      some_v
      = let {
        
          m2  :: Zombie t [a]
          [LclId, Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False, WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0 }]
          m2 = $c<|> @ t @ [a] some_v (lvl_s3sF @ a @ t) } in
        $c>>=
        @ t
          @ ([a] -> [a])
          @ [a]
          ($c>>= @ t @ a @ ([a] -> [a]) v (lvl_s3sG @ a @ t))
          (\ (x1 [Dmd=<L,C(U)>] :: [a] -> [a]) -> $c>>= @ t @ [a] @ [a] m2 (\ (x2  :: [a]) -> ReturnZ @ t @ [a] (x1 x2) (Sunlight @ t @ [a]))); } in
    some_v


$cmany  :: forall (t :: * -> *) a .   Zombie t a -> Zombie t [a]
[LclId,
Arity=1,
Str=<S,U> ,
Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 100 0
}]
$cmany
= \ (@ (t :: * -> *)) (@ a) (v [Dmd=<S,U>] :: Zombie t a) ->
  letrec {
    
      many_v [Occ=LoopBreaker] :: Zombie t [a]
      [LclId,
      Str= {a3rb-><S,A>},
      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False, WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 90 0
      }]
      many_v = $c<|> @ t @ [a] ($c<*> @ t @ [a] @ [a] ($c>>= @ t @ a @ ([a] -> [a]) v (lvl_s3sG @ a @ t)) many_v) (lvl_s3sF @ a @ t); } in
    many_v


$c>> [InlPrag=INLINE (sat-args=2) ] :: forall (t :: * -> *) a b .   Zombie t a -> Zombie t b -> Zombie t b
[LclId,
Arity=2,
Str=<S,1*U><L,U> ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
}]
$c>>
= \ (@ (t :: * -> *)) (@ a) (@ b) (eta_B2 [Dmd=<S,1*U>] :: Zombie t a) (eta_B1  :: Zombie t b) ->
  $c>>= @ t @ a @ b eta_B2 (\ _ [Occ=Dead, Dmd=<L,A>] -> eta_B1)


$c<$  :: forall (t :: * -> *) a b .   a -> Zombie t b -> Zombie t a
[LclId,
Arity=2,
Str=<L,U><S,1*U> ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
}]
$c<$
= \ (@ (t :: * -> *)) (@ a) (@ b) (x  :: a) (m1 [Dmd=<S,1*U>] :: Zombie t b) ->
  let {
    
      lvl_s3sJ  :: Zombie t a
      [LclId, Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
      lvl_s3sJ = ReturnZ @ t @ a x (Sunlight @ t @ a) } in
    $c>>= @ t @ b @ a m1 (\ _ [Occ=Dead, Dmd=<L,A>] -> lvl_s3sJ)


$fFunctorZombie [InlPrag=  CONLIKE] :: forall (t :: * -> *) .   Functor (Zombie t)
[LclIdX[DFunId], Str=m , Unf=DFun: \ (@ (t :: * -> *)) -> C:Functor TYPE: Zombie t $cfmap @ t $c<$ @ t]
$fFunctorZombie = \ (@ (t :: * -> *)) -> C:Functor @ (Zombie t) ($cfmap @ t) ($c<$ @ t)


$fApplicativeZombie [InlPrag=  CONLIKE] :: forall (t :: * -> *) .   Applicative (Zombie t)
[LclIdX[DFunId],
Str=m ,
Unf=DFun: \ (@ (t :: * -> *)) -> C:Applicative TYPE: Zombie t $fFunctorZombie @ t $creturn @ t $c<*> @ t $cliftA2 @ t $c>> @ t $c<* @ t]
$fApplicativeZombie
= \ (@ (t :: * -> *)) -> C:Applicative @ (Zombie t) ($fFunctorZombie @ t) ($creturn @ t) ($c<*> @ t) ($cliftA2 @ t) ($c>> @ t) ($c<* @ t)


$fAlternativeZombie [InlPrag=  CONLIKE] :: forall (t :: * -> *) .   Alternative (Zombie t)
[LclIdX[DFunId],
Str=m ,
Unf=DFun: \ (@ (t :: * -> *)) -> C:Alternative TYPE: Zombie t $fApplicativeZombie @ t Sunlight @ t $c<|> @ t $csome @ t $cmany @ t]
$fAlternativeZombie = \ (@ (t :: * -> *)) -> C:Alternative @ (Zombie t) ($fApplicativeZombie @ t) (Sunlight @ t) ($c<|> @ t) ($csome @ t) ($cmany @ t)


lvl_s3sK  :: forall (t :: * -> *) a .   [Char] -> Zombie t a
[LclId,
Arity=1,
Str=<B,U>x ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
}]
lvl_s3sK = \ (@ (t :: * -> *)) (@ a) (eta_B1 [Dmd=<B,U>] :: [Char]) -> errorWithoutStackTrace @ 'LiftedRep @ (Zombie t a) eta_B1


$fMonadZombie [InlPrag=  CONLIKE] :: forall (t :: * -> *) .   Monad (Zombie t)
[LclIdX[DFunId],
Str=m ,
Unf=DFun: \ (@ (t :: * -> *)) ->
C:Monad TYPE: Zombie t $fApplicativeZombie @ t $c>>= @ t $c>> @ t $creturn @ t \ (@ a) -> errorWithoutStackTrace @ 'LiftedRep @ (Zombie t a)]
$fMonadZombie = \ (@ (t :: * -> *)) -> C:Monad @ (Zombie t) ($fApplicativeZombie @ t) ($c>>= @ t) ($c>> @ t) ($creturn @ t) (lvl_s3sK @ t)


$fMonadPlusZombie [InlPrag=  CONLIKE] :: forall (t :: * -> *) .   MonadPlus (Zombie t)
[LclIdX[DFunId], Str=m , Unf=DFun: \ (@ (t :: * -> *)) -> C:MonadPlus TYPE: Zombie t $fAlternativeZombie @ t $fMonadZombie @ t Sunlight @ t $c<|> @ t]
$fMonadPlusZombie = \ (@ (t :: * -> *)) -> C:MonadPlus @ (Zombie t) ($fAlternativeZombie @ t) ($fMonadZombie @ t) (Sunlight @ t) ($c<|> @ t)


embalm [InlPrag=INLINE (sat-args=1) ] :: forall (t :: * -> *) a .   MonadView t (Zombie t) a -> Zombie t a
[LclIdX,
Arity=1,
Str=<S,1*U> ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
}]
embalm
= \ (@ (t :: * -> *)) (@ a) (ds_d3qu [Dmd=<S,1*U>] :: MonadView t (Zombie t) a) ->
  case ds_d3qu  of  {
    Return x  -> ReturnZ @ t @ a x (Sunlight @ t @ a);
      :>>= @ a x  k  ->
      BindZ
        @ t
          @ a
          @ a
          x
          (Leaf
          @ *
            @ (Kleisli (Zombie t))
            @ a
            @ a
            (k `cast` (Sym (N:Kleisli[0] <Zombie t>_R <a>_R <a>_N) :: Coercible (a -> Zombie t a1) (Kleisli (Zombie t) a a1))))
          (Sunlight @ t @ a)
    }


lvl_s3uJ  :: forall (t :: * -> *) a .   Cat (Kleisli (Zombie t)) a a
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
lvl_s3uJ
= \ (@ (t :: * -> *)) (@ a) ->
  Leaf
    @ *
      @ (Kleisli (Zombie t))
      @ a
      @ a
      (($creturn @ t @ a) `cast` (Sym (N:Kleisli[0] <Zombie t>_R <a>_R <a>_N) :: Coercible (a -> Zombie t a) (Kleisli (Zombie t) a a)))


liftZ [InlPrag=INLINE (sat-args=1) ] :: forall (t :: * -> *) a .   t a -> Zombie t a
[LclIdX,
Arity=1,
Str=<S,1*U> ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
}]
liftZ
= \ (@ (t :: * -> *)) (@ a) (eta_B1 [Dmd=<S,1*U>] :: t a) ->
  case eta_B1  of dt_X1Hh  { __DEFAULT  -> BindZ @ t @ a @ a dt_X1Hh (lvl_s3uJ @ t @ a) (Sunlight @ t @ a) }

Rec {

disembalm_go  :: forall (t :: * -> *) a b .   Cat (Kleisli (Zombie t)) a b -> a -> Zombie t b
[LclId,
Arity=2,
Str=<S,1*U><L,U> ,
Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [50 0] 132 0
}]
disembalm_go
= \ (@ (t :: * -> *)) (@ a) (@ b) (c [Dmd=<S,1*U>] :: Cat (Kleisli (Zombie t)) a b) (a  :: a) ->
  case c  of  {
    Leaf k2 [Dmd=<C(S),1*C1(U)>] -> (k2 `cast` (N:Kleisli[0] <Zombie t>_R <a>_R <b>_N :: Coercible (Kleisli (Zombie t) a b) (a -> Zombie t b))) a;
      Tree @ b1 a1 [Dmd=<S,1*U>] b2  ->
      joinrec {
        
          go [Occ=LoopBreaker] :: forall x .   Cat (Kleisli (Zombie t)) a x -> Cat (Kleisli (Zombie t)) x b -> Zombie t b
          [LclId[JoinId(3)],
          Arity=2,
          Str=<S,1*U><L,U> ,
          Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [46 0] 86 0
          }]
          go (@ x) (ds2 [Dmd=<S,1*U>] :: Cat (Kleisli (Zombie t)) a x) (t  :: Cat (Kleisli (Zombie t)) x b)
          = case ds2  of  {
            Leaf k2 [Dmd=<C(S),1*C1(U)>] ->
              disembalm_go2
                @ t @ x @ b ((k2 `cast` (N:Kleisli[0] <Zombie t>_R <a>_R <x>_N :: Coercible (Kleisli (Zombie t) a x) (a -> Zombie t x))) a) t;
              Tree @ b3 c [Dmd=<S,1*U>] d  -> jump go @ b3 c (Tree @ * @ (Kleisli (Zombie t)) @ b3 @ b @ x d t)
            }; } in
        jump go @ b1 a1 b2
    }


disembalm_go2 [Occ=LoopBreaker] :: forall (t :: * -> *) a b .   Zombie t a -> Cat (Kleisli (Zombie t)) a b -> Zombie t b
[LclId,
Arity=2,
Str=<S,1*U><L,U> ,
Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [90 0] 170 50
}]
disembalm_go2
= \ (@ (t :: * -> *)) (@ a) (@ b) (x [Dmd=<S,1*U>] :: Zombie t a) (c  :: Cat (Kleisli (Zombie t)) a b) ->
  case x  of  {
    Sunlight  -> Sunlight @ t @ b;
      ReturnZ a  xs [Dmd=<L,1*U>] -> $c<|> @ t @ b (disembalm_go @ t @ a @ b c a) (disembalm_go2 @ t @ a @ b xs c);
      BindZ @ x t  c'  xs [Dmd=<L,1*U>] -> BindZ @ t @ b @ x t (Tree @ * @ (Kleisli (Zombie t)) @ x @ b @ a c' c) (disembalm_go2 @ t @ a @ b xs c)
    }
end Rec }

Rec {

disembalm [Occ=LoopBreaker] :: forall (t :: * -> *) a .   Zombie t a -> [MonadView t (Zombie t) a]
[LclIdX,
Arity=1,
Str=<S,1*U> ,
Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [80] 140 70
}]
disembalm
= \ (@ (t :: * -> *)) (@ a) (ds_d3qk [Dmd=<S,1*U>] :: Zombie t a) ->
  case ds_d3qk  of  {
    Sunlight  -> [] @ (MonadView t (Zombie t) a);
      ReturnZ x  xs [Dmd=<L,1*U>] -> : @ (MonadView t (Zombie t) a) (Return @ t @ (Zombie t) @ a x) (disembalm @ t @ a xs);
      BindZ @ x x [Dmd=<L,1*U>] d  xs [Dmd=<L,1*U>] ->
      :
        @ (MonadView t (Zombie t) a)
          (case x  of dt_X1Hh  { __DEFAULT  -> :>>= @ t @ (Zombie t) @ a @ x dt_X1Hh (disembalm_go @ t @ x @ a d) })
          (disembalm @ t @ a xs)
    }

end Rec }


hoistZombie [InlPrag=INLINE (sat-args=1) ] :: forall (s :: * -> *) (t :: * -> *) a .   (forall x .   s x -> t x) -> Zombie s a -> Zombie t a
[LclIdX,
Arity=2,
Str=<L,C(U)><S,1*U> ,
Unf=Unf{Src=InlineStable,
TopLvl=True,
Value=True,
ConLike=True,
WorkFree=True,
Expandable=True,
Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=False)
}]
hoistZombie
= \ (@ (s :: * -> *)) (@ (t :: * -> *)) (@ a) (f [Dmd=<L,C(U)>] :: forall x .   s x -> t x) (eta_B1 [Dmd=<S,1*U>] :: Zombie s a) ->
  letrec {
    
      lvl_s3sL  :: forall x y .   (Any -> Zombie s y) -> Any -> Zombie t y
      [LclId, Arity=2, Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60 }]
      lvl_s3sL = \ (@ x) (@ y) -> . @ (Zombie s y) @ (Zombie t y) @ Any (go @ y);
      
      go [Occ=LoopBreaker] :: forall x .   Zombie s x -> Zombie t x
      [LclId,
      Arity=1,
      Str=<S,1*U> ,
      Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [70] 140 80
      }]
      go
      = \ (@ x) (ds_d3pQ [Dmd=<S,1*U>] :: Zombie s x) ->
        case ds_d3pQ  of  {
          Sunlight  -> Sunlight @ t @ x;
            ReturnZ x  xs [Dmd=<L,1*U>] -> ReturnZ @ t @ x x (go @ x xs);
            BindZ @ x x  c [Dmd=<L,1*U>] xs [Dmd=<L,1*U>] ->
            BindZ
              @ t
                @ x
                @ x
                (f @ x x)
                (transCat
                @ *
                  @ (Kleisli (Zombie s))
                  @ (Kleisli (Zombie t))
                  @ x
                  @ x
                  (lvl_s3sL
                  `cast` (forall (x :: <*>_N).
                  forall (y :: <*>_N).
                  UnsafeCo representational (Any -> Zombie s y) (Kleisli (Zombie s) x y)
                  -> UnsafeCo representational (Any -> Zombie t y) (Kleisli (Zombie t) x y)
                  :: Coercible
                  (forall x y .   (Any -> Zombie s y) -> Any -> Zombie t y) (forall x y .   Kleisli (Zombie s) x y -> Kleisli (Zombie t) x y)))
                  c)
                (go @ x xs)
          }; } in
    go @ a eta_B1


$trModule_s3rJ  :: Addr#
[LclId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 120 0 }]
$trModule_s3rJ = "monad-skeleton-0.1.4-8qPR3YvpoiQ3KQsCUlMma8"#


$trModule_s3rI  :: TrName
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$trModule_s3rI = TrNameS $trModule_s3rJ


$trModule_s3rL  :: Addr#
[LclId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0 }]
$trModule_s3rL = "Control.Monad.Zombie"#


$trModule_s3rK  :: TrName
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$trModule_s3rK = TrNameS $trModule_s3rL


$trModule  :: Module
[LclIdX, Str=m , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$trModule = Module $trModule_s3rI $trModule_s3rK


$krep_a3pA [InlPrag=[~]  ] :: KindRep
[LclId, Str=m4 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pA = KindRepFun krep$*Arr* krep$*Arr*


$krep_a3pI [InlPrag=[~]  ] :: KindRep
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$krep_a3pI = KindRepVar 2#


$krep_a3pD [InlPrag=[~]  ] :: KindRep
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$krep_a3pD = KindRepVar 1#


$krep_a3pC [InlPrag=[~]  ] :: KindRep
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$krep_a3pC = KindRepVar 0#


$krep_a3pH [InlPrag=[~]  ] :: KindRep
[LclId, Str=m3 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pH = KindRepApp $krep_a3pC $krep_a3pI


$tcZombie_s3rN  :: Addr#
[LclId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0 }]
$tcZombie_s3rN = "Zombie"#


$tcZombie_s3rM  :: TrName
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$tcZombie_s3rM = TrNameS $tcZombie_s3rN


$tcZombie  :: TyCon
[LclIdX, Str=m , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70 }]
$tcZombie = TyCon 11293397174047330303## 7657928837894900771## $trModule $tcZombie_s3rM 0# $krep_a3pA


$krep_s3rO  :: [KindRep]
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_s3rO = : @ KindRep $krep_a3pC ([] @ KindRep)


$krep_a3pM [InlPrag=[~]  ] :: KindRep
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pM = KindRepTyConApp $tcZombie $krep_s3rO


$krep_s3rP  :: [KindRep]
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_s3rP = : @ KindRep $krep_a3pM ([] @ KindRep)


$krep_a3pL [InlPrag=[~]  ] :: KindRep
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pL = KindRepTyConApp $tcKleisli $krep_s3rP


$krep_s3rT  :: [KindRep]
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_s3rT = : @ KindRep $krep_a3pD ([] @ KindRep)


$krep_s3rS  :: [KindRep]
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_s3rS = : @ KindRep $krep_a3pI $krep_s3rT


$krep_s3rR  :: [KindRep]
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_s3rR = : @ KindRep $krep_a3pL $krep_s3rS


$krep_s3rQ  :: [KindRep]
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_s3rQ = : @ KindRep krep$* $krep_s3rR


$krep_a3pK [InlPrag=[~]  ] :: KindRep
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pK = KindRepTyConApp $tcCat $krep_s3rQ


$krep_s3rU  :: [KindRep]
[LclId, Str=m2 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_s3rU = : @ KindRep $krep_a3pC $krep_s3rT


$krep_a3pB [InlPrag=[~]  ] :: KindRep
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pB = KindRepTyConApp $tcZombie $krep_s3rU


$tc'Sunlight_s3rX  :: Addr#
[LclId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0 }]
$tc'Sunlight_s3rX = "'Sunlight"#


$tc'Sunlight_s3rW  :: TrName
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$tc'Sunlight_s3rW = TrNameS $tc'Sunlight_s3rX


$tc'Sunlight  :: TyCon
[LclIdX, Str=m , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70 }]
$tc'Sunlight = TyCon 1787438877469491663## 3391905816568105408## $trModule $tc'Sunlight_s3rW 2# $krep_a3pB


$krep_a3pF [InlPrag=[~]  ] :: KindRep
[LclId, Str=m4 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pF = KindRepFun $krep_a3pB $krep_a3pB


$krep_a3pE [InlPrag=[~]  ] :: KindRep
[LclId, Str=m4 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pE = KindRepFun $krep_a3pD $krep_a3pF


$tc'ReturnZ_s3rZ  :: Addr#
[LclId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0 }]
$tc'ReturnZ_s3rZ = "'ReturnZ"#


$tc'ReturnZ_s3rY  :: TrName
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$tc'ReturnZ_s3rY = TrNameS $tc'ReturnZ_s3rZ


$tc'ReturnZ  :: TyCon
[LclIdX, Str=m , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70 }]
$tc'ReturnZ = TyCon 4270294382015102140## 4415216082822077174## $trModule $tc'ReturnZ_s3rY 2# $krep_a3pE


$krep_a3pJ [InlPrag=[~]  ] :: KindRep
[LclId, Str=m4 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pJ = KindRepFun $krep_a3pK $krep_a3pF


$krep_a3pG [InlPrag=[~]  ] :: KindRep
[LclId, Str=m4 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30 }]
$krep_a3pG = KindRepFun $krep_a3pH $krep_a3pJ


$tc'BindZ_s3s1  :: Addr#
[LclId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0 }]
$tc'BindZ_s3s1 = "'BindZ"#


$tc'BindZ_s3s0  :: TrName
[LclId, Str=m1 , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20 }]
$tc'BindZ_s3s0 = TrNameS $tc'BindZ_s3s1


$tc'BindZ  :: TyCon
[LclIdX, Str=m , Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70 }]
$tc'BindZ = TyCon 16159064753672472697## 18067874246339838433## $trModule $tc'BindZ_s3s0 3# $krep_a3pG
